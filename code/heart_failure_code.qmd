---
title: "README"
author: "Michal Rackiewicz"
format: gfm
editor: visual
---

This dataset contains medical records of 299 patients with previous events of heart failure.

The data was retrieved from the [UC Irvine Machine Learning Repository](https://archive.ics.uci.edu/dataset/519/heart+failure+clinical+records). More information on the data and the methodology is available in the corresponding [publication](https://www.semanticscholar.org/paper/e64579d8593140396b518682bb3a47ba246684eb).

```{r packages}
#| output: false
#| warning: false
library(dlookr) 
# library(doParallel)
library(flextable)
library(ggstatsplot)
library(glmnet)
library(gridExtra)
# library(gt)
library(patchwork)
# library(renv)
library(skimr)
library(themis)
library(tidymodels)
library(tidyverse)
library(vip)
tidymodels_prefer()
```

```{r data}
hf <- read.csv("../data/heart_failure_clinical_records_dataset.csv")
```

```{r skim}
skim(hf)
```

```{r target_var}
hf <- hf %>% 
  rename(death = DEATH_EVENT) %>% 
  mutate(across(c(anaemia, diabetes, high_blood_pressure, sex, smoking, death), as.factor))
```

```{r splits}
set.seed(123)
hf_split <- initial_split(hf, strata = death, prop = 0.7)
hf_train <- training(hf_split)
hf_test <- testing(hf_split)
```

```{r cv_folds}
train_folds <- vfold_cv(hf_train, v = 10, repeats = 5)
```

```{r ggpairs}
#| message: false
theme_set(theme_minimal())
```

```{r summarystats_cat}
hf_train %>% 
  group_by(death) %>% 
  diagnose_category() %>% 
  flextable()
```

### Numeric variables

```{r summarystats_numeric}
hf_train %>% 
  diagnose_numeric() %>% 
  flextable()
```

```{r outliers}
hf_train %>% 
  group_by(death) %>% 
  diagnose_outlier() %>% 
  flextable()
```

```{r normality_stats}
hf_train %>% 
  normality() %>% 
  flextable()
```

```{r normality_plots}
hf_train %>% 
  plot_normality(col = "#D53E4F")
hf_train %>% 
  plot_normality(left = "Box-Cox", right = "1/x", col = "#D53E4F")
```

```{r numeric_transformations}
preds_transformed <- recipe(death ~ ., data = hf_train) %>% 
  step_normalize(all_numeric_predictors()) %>% 
  step_YeoJohnson(all_numeric_predictors()) %>%
  # step_YeoJohnson(time, platelets, serum_creatinine, creatinine_phosphokinase, serum_sodium) %>%
  # step_log(, ejection_fraction) %>%
  # step_sqrt(age, time) %>%
  # step_scale(all_numeric_predictors()) %>% 
  prep() %>% 
  juice()

preds_transformed %>% 
  plot_normality() 
```

```{r corrplot}
preds_transformed %>% 
  plot_correlate(method = "pearson")
```

```{r}
preds_transformed %>% 
  group_by(death) %>% 
  plot_correlate()
```

When grouped by death the correlations between the numeric variables increase: age:creatinine phoshphokinase (weak positive) age:ejection fraction (weak negative) age:time (weak positive) creatinine phosphokinase:time (weak positive) creatinine phosphokinase:serum creatinin (weak positive) serum creatinine:serum sodium (mid negative)

```{r}
hf_train %>% 
  group_by(death) %>% 
  diagnose_outlier() %>% 
  flextable()

preds_transformed %>% 
  group_by(death) %>% 
  diagnose_outlier() %>% 
  flextable()
```

```{r boxplots}
for (i in hf_train %>% select(where(is.numeric)) %>% names()){
  print(
    ggplot(data = hf_train, aes(x = death, y = !!sym(i))) +
      geom_boxplot(aes(fill = death)) +
      xlab("Death") +
      ylab(i) +
      ggtitle(paste(i, "by death before transformation")) +
      theme_bw() +
      theme(legend.position = "none")
    )
}

```
Serum creatinine, time

```{r scatterplots}
  dlookr::univar_numeric(hf_train)
```


### Categorical variables

```{r chi-squared}
chi <- function(x, y){
  test <- chisq.test(table(x, y))
  res <- c(test$statistic, test$p.value,
           sign(table(x, y)))
}

apply(combn(1:ncol()))
```

```{r}
cat_vars <- hf_train %>% select(where(is.factor)) %>% names()


for(i in hf_train %>% select(where(is.factor))) {
  ggbarstats(
    data = hf_train,
    x = i,
    y = j
  )
}
```


```{r}
hf_train %>% 
  eda_web_report(
    target = "death", 
    output_format = "html"
  )
```

### Feature selection
```{r}
set.seed(16633)
results <- data.frame(Predictor = preds_transformed %>% select(where(is.numeric)) %>% names(),
                      Improvement = as.numeric(NA),
                      Pvalue = NA,
                      ROC_AUC = as.numeric(NA),
                      stringsAsFactors = FALSE
                      )

for (i in 1:nrow(results)) {

  null_rec <- recipe(death ~  1, data = preds_transformed)
  alt_rec <- recipe(death ~ ., data = preds_transformed[, c("death", results$Predictor[i])])
  
  preproc <- list(
    alt = alt_rec,
    null = null_rec
    )
  
  glm_models <- workflow_set(preproc, list(glm = logistic_reg() %>% set_engine("glm")), cross = FALSE)
  
  glm_models <- glm_models %>% 
    workflow_map("fit_resamples",
                 seed = 8960, 
                 verbose = F,
                 resamples = train_folds)
  
  model_metrics <- collect_metrics(glm_models, summarize = TRUE) %>% 
    filter(.metric == "roc_auc")
  print(model_metrics)
  test_res <- t.test(model_metrics$mean, alternative = "greater")
  
  results$Improvement[i] <- model_metrics[1, 'mean'] - model_metrics[2, 'mean']
  results$Pvalue[i] <- test_res$p.value
  results$ROC_AUC[i] <- model_metrics[1, 'mean']

}

results[, c("Improvement", "ROC_AUC")] <- sapply(results[, c("Improvement", "ROC_AUC")], unlist)

results %>% 
  arrange(Pvalue)
```

```{r}

null_rec <- recipe(death ~  1, data = preds_transformed)
  
alt_rec <- recipe(death ~ platelets, data = preds_transformed)

preproc <- list(null = null_rec,
                alt = alt_rec)

glm_models <- workflow_set(preproc, list(glm = logistic_reg() %>% set_engine("glm")), cross = FALSE)

glm_models <- glm_models %>% 
  workflow_map("fit_resamples",
               seed = 8960, verbose = T,
               resamples = train_folds)

mod_metrics <- collect_metrics(glm_models, summarize = FALSE) %>% 
  filter(.metric == "roc_auc")

mod_metrics_wider <- mod_metrics %>% 
  select(wflow_id, .estimate, id) %>% 
  pivot_wider(id_cols = "id", names_from = "wflow_id", values_from = ".estimate")

compare_models <- mod_metrics_wider %>% 
  mutate(across(c(alt_glm, null_glm), unlist))
  mutate(difference = alt_glm - null_glm)

```

EDA summary: - no missing values - outliers are not - no strong correlations - weak correlations for age:serum creatinine and serum sodium:serum creatinine (negative)

```{r eda_barplots}
ggplot(hf_train, aes(smoking, fill = death)) +
  geom_bar() +
  facet_wrap(~anaemia) + 
  xlab("Smoking") +
  ylab("Count") +
  theme_bw() +
  theme(legend.position = "none")
  
```

```{r eda_boxplots}
# function(data){
  num_vars <- hf_train %>% 
  select(where(~is.numeric(.) && max(.) > 1)) %>%
  names()

  cat_vars <- hf_train %>% 
  select(where(~is.numeric(.) && max(.) == 1)) %>% 
  names()
 
 for (c_var in cat_vars) {
   for (n_var in num_vars) {
     
     b <- ggplot(data = hf_train,
                 aes(
                   x = as.factor(!!sym(c_var)),
                   y = !!sym(n_var),
                   color = death)) +
       geom_boxplot() +
       labs(title = paste("Box plot of", n_var, "by", c_var),
            x = c_var,
            y = n_var) +
       theme_minimal()
       
     plot(b)
     
   }
 }
# }
```

## Model recipes

```{r recipe}
rec_norm <- recipe(death ~ ., data = hf_train) %>% 
  step_normalize(all_numeric_predictors()) 

rec_log <- recipe(death ~ ., data = hf_train) %>% 
  step_log(c(creatinine_phosphokinase, serum_creatinine)) %>% 
  step_BoxCox()
  step_normalize(c(platelets, age, serum_sodium, time, ejection_fraction, creatinine_phosphokinase))
 
rec_norm_smote <- rec_norm %>%  
  step_smote(death)

rec_log_smote <- rec_log %>% 
  step_smote(death)

rec_n_poly <-  rec_norm %>% 
   step_poly(all_predictors()) %>% 
   step_interact(~ all_predictors():all_predictors())

rec_l_poly <-  rec_log %>% 
   step_poly(all_predictors()) %>% 
   step_interact(~ all_predictors():all_predictors())

rec_ns_poly <-  rec_norm_smote %>% 
   step_poly(all_predictors()) %>% 
   step_interact(~ all_predictors():all_predictors())

rec_ls_poly <-  rec_log_smote %>% 
   step_poly(all_predictors()) %>% 
   step_interact(~ all_predictors():all_predictors())
```

### Model specs

```{r model_specs}
lasso_spec <- logistic_reg(
  penalty = tune(), 
  mixture = 1,
  engine = "glmnet")

rf_spec <- rand_forest(
  trees = 1000, 
  mtry = tune(), 
  min_n = tune(),
  mode = "classification",
  engine = "ranger"
)
  
svm_r_spec <- svm_rbf(
  cost = tune(),
  rbf_sigma = tune(),
  mode = "classification", 
  engine = "kernlab"
)

svm_p_spec <- svm_poly(
  cost = tune(),
  degree = tune(),
  mode = "classification", 
  engine = "kernlab"
)
  
knn_spec <- nearest_neighbor(
  neighbors = tune(), 
  dist_power = tune(), 
  weight_func = tune(), 
  mode = "classification",
  engine = "kknn"
)
  
xg_spec <- boost_tree(
  tree_depth = tune(), 
  learn_rate = tune(), 
  loss_reduction = tune(),
  min_n = tune(), 
  sample_size = tune(), 
  trees = 100,
  mode = "classification", 
  engine = "xgboost"
)
```

Create Workflow set

```{r workflow}
comp_models <-
  workflow_set(
    preproc = list(
      norm = rec_norm,
      log = rec_log,
      sall = rec_norm_smote,
      slog = rec_log_smote,
      pnorm = rec_n_poly,
      plog = rec_l_poly,
      psnorm = rec_ns_poly,
      pslog = rec_ls_poly
    ),
    models = list(ls = lasso_spec, 
                  rf = rf_spec, 
                  svm_r = svm_r_spec,
                  svm_p = svm_p_spec, 
                  knn = knn_spec,
                  xg = xg_spec),
    cross = TRUE
  ) %>% 
  workflow_map("fit_resamples", 
               seed = 2024, 
               verbose = TRUE,
               resamples = train_folds,
               control = "keep_pred")

comp_models
```

```{r metrics}
met <- metric_set(roc_auc, mcc, precision)
```

```{r parallelization}
clust <- makePSOCKcluster(5)
registerDoParallel(clust)
```

## Lasso

```{r lasso_tune}
lasso_grid <- tune_grid(
  add_model(wf, tune_lasso),
  resamples = train_folds,
  grid = grid_regular(
    penalty(),
    levels = 50),
  metrics = met
)

lasso_grid %>% 
  collect_metrics() %>% 
  ggplot(aes(penalty, mean, color = .metric)) +
  geom_line(size = 1.5) +
  geom_errorbar(aes(ymax = mean + std_err, 
                    ymin = mean - std_err),
                alpha = 0.5) +
  facet_wrap(~ .metric, nrow = 3, scales = "free") +
  scale_x_log10() +
  theme_bw() +
  theme(legend.position = "none")
```

Extract best-performing model

```{r}
lasso_grid %>% select_best("precision")
lasso_grid %>% select_best("roc_auc")
lasso_grid %>% select_best("mcc")

best_mcc_lasso <- lasso_grid %>% select_best("mcc")

```

```{r}
final_lasso <- finalize_workflow(wf %>% add_model(tune_lasso), 
                                   best_mcc_lasso)
```

```{r}
last_fit(final_lasso, hf_split, metrics = met) %>% 
  collect_metrics()
```

### Variable importance

```{r}
final_lasso %>% 
  fit(hf_train) %>% 
  extract_fit_parsnip() %>% 
  vip::vi(lambda = best_roc_lasso$penalty) %>% 
  mutate(Variable = fct_reorder(Variable, Importance)) %>% 
  ggplot(aes(Importance, Variable, color = Sign)) +
  geom_point(size = 3) +
  labs(y = NULL)
```

## Random forest

```{r rf_tune}
rf_grid <- tune_grid(
  add_model(wf, tune_rf),
  resamples = train_folds,
  grid = grid_regular(
    mtry(range = c(3, 8)),
    min_n(),
    levels = 50
  )
)
```

```{r}
rf_grid %>% select_best("roc_auc")
rf_grid %>% select_best("precision")
rf_grid %>% select_best("mcc")

best_roc_rf <- rf_grid %>% select_best("mcc")
```

```{r}
final_rf <- finalize_workflow(wf, add_model(tune_rf),
                              best_roc_rf)
```

```{r}
last_fit(final_rf, hf_split, metrics = met) %>% 
  collect_metrics()
```

## Support vector machines

```{r}
svm_grid <- tune_grid(
  add_model(wf, tune_svm),
  resamples = train_folds,
  grid = grid_regular(
    cost(),
    rbf_sigma(),
    levels = 50
  )
)
```

```{r}
svm_grid %>% select_best("roc_auc")
svm_grid %>% select_best("precision")
svm_grid %>% select_best("mcc")

# best_roc_svm <- svm_grid %>% select_best("roc_auc")
```

```{r}
final_svm <- finalize_workflow(wf %>% add_model(tune_svm),
                               best_roc_svm)
```

```{r}
last_fit(final_svm, hf_split, metrics = met) %>% 
  collect_metrics()
```
