---
title: "README"
author: "Michal Rackiewicz"
format: gfm
editor: visual
---

This dataset contains medical records of 299 patients with previous events of heart failure.

The data was retrieved from the [UC Irvine Machine Learning Repository](https://archive.ics.uci.edu/dataset/519/heart+failure+clinical+records). More information on the data and the methodology is available in the corresponding [publication](https://www.semanticscholar.org/paper/e64579d8593140396b518682bb3a47ba246684eb).

```{r packages}
#| output: false
library(tidyverse)
library(tidymodels)
library(skimr)
library(gridExtra)
library(Hmisc)
```

```{r data}
hf <- read.csv("data/heart_failure_clinical_records_dataset.csv")
```

```{r skim}
str(hf)
skim(hf)
```

```{r target_var}
hf <- hf %>% 
  rename(Death = DEATH_EVENT) %>% 
  mutate(Death = factor(Death))
```

```{r splits}
set.seed(123)
hf_split <- initial_split(hf, strata = Death, prop = 0.7)
hf_train <- training(hf_split)
hf_test <- testing(hf_split)
```

```{r cv_folds}
train_folds <- vfold_cv(hf_train, v = 10, repeats = 2)
```

```{r}
# distributions
theme_set(theme_bw())

num_vars <- hf_train %>% 
  select(where(~ is.numeric(.x) && max(.x) > 1)) %>% 
  names()

ggplot(data = hf_train, aes(x = age)) +
  geom_point()

plots <- list()

for (i in seq_along(num_vars)) {
  
  var <- num_vars[i]
  
  if (str_detect(var, "creatinine")) {
    p <- ggplot(data = hf_train, aes(x = log(!!sym(var))))
    
    q <-  ggplot(data = hf_train, aes(sample = log(!!sym(var)))) +
      stat_qq() +
      stat_qq_line()
    
  } else {
    p <- ggplot(data = hf_train, aes(x = !!sym(var)))
    
    q <-  ggplot(data = hf_train, aes(sample = !!sym(var))) +
      stat_qq() +
      stat_qq_line()
  }
  
  h <- p + 
    geom_histogram() +
    ggtitle(var)
  
  plots <- append(plots, list(h, q))
}

do.call("grid.arrange", c(plots, ncol = 4))

# correlations
```

```{r}
cat_vars <- hf_train %>% 
  select(c(Death, where(~is.numeric(.) && max(.) == 1))) %>% 
  names()

cplots <- list()

for (i in seq_along(cat_vars)){
  
  var = cat_vars[i]

  p <- ggplot(hf_train, aes(x = !!sym(var),
                            group = !!sym(var),
                            fill = factor(!!sym(var)))) +
    geom_bar() +
    theme(legend.position = "none") +
    ggtitle(var)
  
  cplots <- append(cplots, list(p))
}

do.call("grid.arrange", c(cplots, ncol = 2))
```


Model
```{r}
hf_recipe <- recipe(death ~ ., data = hf_train) %>% 
  step_mutate(across(c(aneemia, diabetes, high_blood_pressure, sex, smoking), as.factor)) %>% 
  step_log(contains("creatinine")) %>% 
  step_normalize(all_numeric_predictors())

wf <- workflow() %>% 
  add_recipe(hf_recipe)
  
```
